{"version":3,"sources":["images/bacon-me-crazy-logo.png","components/Jumbotron/Jumbotron.js","components/Scorecard/Scorecard.js","components/Image/Image.js","components/ClickGame/ClickGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Jumbotron","props","react_default","a","createElement","className","children","Scorecard","score","response","topScore","Image","onClick","makeGuess","id","src","image","alt","ClickGame","state","bacons","guessed","shuffle","arr","sort","Math","random","_this","includes","console","log","setState","push","_this2","this","components_Scorecard_Scorecard","map","bacon","components_Image_Image","class","React","Component","imgStyle","margin","display","App","components_Jumbotron_Jumbotron","KevinBacon","style","components_ClickGame_ClickGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uzCAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4TCKzBC,SAFG,SAAAC,GAAK,OAAKC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMK,2BCQ/CC,SARG,SAACN,GAAD,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,mBAAWH,EAAMO,OACjBN,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,UACXP,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMS,aCEfC,SAND,SAAAV,GAAK,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCAAyCO,QAAS,kBAAMX,EAAMY,UAAUZ,EAAMa,MACzFZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKd,EAAMe,MAAOX,UAAU,iBAAiBY,IAAKhB,EAAMa,QCyDtDI,6MAvDXC,MAAQ,CACJX,MAAO,EACPE,SAAU,EACVU,SACAC,QAAS,MAGbC,QAAU,SAACC,GACP,OAAOA,EAAIC,KAAK,kBAAMC,KAAKC,SAAW,QAG1Cb,UAAY,SAACC,GAELa,EAAKR,MAAME,QAAQO,SAASd,IAE5Be,QAAQC,IAAR,aACAH,EAAKI,SAAS,CAAEvB,MAAO,EAAGa,QAAS,OAG/BM,EAAKR,MAAMX,OAASmB,EAAKR,MAAMT,SAC/BiB,EAAKI,SAAS,CACVvB,MAAOmB,EAAKR,MAAMX,MAAQ,EAC1BE,SAAUiB,EAAKR,MAAMX,MAAQ,IAIjCmB,EAAKI,SAAS,CACVvB,MAAOmB,EAAKR,MAAMX,MAAQ,IAKlCmB,EAAKR,MAAME,QAAQW,KAAKlB,6EAIvB,IAAAmB,EAAAC,KACL,OACIhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAC+B,EAAD,CAAW3B,MAAO0B,KAAKf,MAAMX,MAAOE,SAAUwB,KAAKf,MAAMT,WACzDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACV6B,KAAKZ,QAAQF,GAAQgB,IAAI,SAAAC,GAAK,OAC3BnC,EAAAC,EAAAC,cAACkC,EAAD,CACIzB,UAAWoB,EAAKpB,UAChBC,GAAIuB,EAAMvB,GACVE,MAAOqB,EAAMrB,WAIzBd,EAAAC,EAAAC,cAAA,OAAKmC,MAAM,gCAlDHC,IAAMC,2BCAxBC,SAAW,CACfC,OAAQ,OACRC,QAAS,UA+BIC,mLAzBX,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAC0C,EAAD,KACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,mBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sCAAd,uEAGJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,OAAKW,IAAKgC,IAAY9B,IAAI,mBAAmBZ,UAAU,YAAY2C,MAAON,SAMpFxC,EAAAC,EAAAC,cAAC6C,EAAD,cAtBUR,aCCES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.266f5c71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bacon-me-crazy-logo.f49be59d.png\";","import React from 'react';\nimport './Jumbotron.css';\n\nconst Jumbotron = props => (<div className=\"jumbotron\">{props.children}</div>)\n\nexport default Jumbotron;","import React from 'react';\nimport './Scorecard.css';\n\nconst Scorecard = (props) => (\n    <div className=\"scorecard fixed-bottom\">\n        <p>Score: {props.score}</p>\n        <h3>{props.response}</h3>\n        <p>High Score: {props.topScore}</p>\n    </div>\n)\n\nexport default Scorecard;","import React from 'react';\nimport './Image.css';\n\nconst Image = props => (\n    <div className=\"col-6 col-sm-4 col-md-3 card-container\" onClick={() => props.makeGuess(props.id)}>\n        <img src={props.image} className=\"bacon-card-img\" alt={props.id} />\n    </div>\n)\n\nexport default Image;","import React from 'react';\nimport \"./ClickGame.css\";\nimport bacons from '../../bacons.json';\nimport Scorecard from '../Scorecard/Scorecard';\nimport Image from '../Image/Image';\n\nclass ClickGame extends React.Component {\n    state = {\n        score: 0,\n        topScore: 0,\n        bacons,\n        guessed: []\n    }\n\n    shuffle = (arr) => {\n        return arr.sort(() => Math.random() - 0.5);\n    }\n\n    makeGuess = (id) => {\n        // if id in guessed array\n        if (this.state.guessed.includes(id)) {\n            // end game\n            console.log(`game over`);\n            this.setState({ score: 0, guessed: [] })\n        } else {\n            // increment score\n            if (this.state.score >= this.state.topScore) {\n                this.setState({\n                    score: this.state.score + 1,\n                    topScore: this.state.score + 1\n                });\n            }\n            else {\n                this.setState({\n                    score: this.state.score + 1\n                })\n            }\n\n            // push id to guessed array\n            this.state.guessed.push(id);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <Scorecard score={this.state.score} topScore={this.state.topScore} />\n                <div className=\"row no-gutters mb-5\">\n                    {this.shuffle(bacons).map(bacon =>\n                        <Image\n                            makeGuess={this.makeGuess}\n                            id={bacon.id}\n                            image={bacon.image}\n                        />\n                    )}\n                </div>\n                <div class=\"fixed-bottom-offset\"></div>\n            </div>\n        )\n    }\n}\n\nexport default ClickGame;","import React, { Component } from 'react';\nimport Jumbotron from './components/Jumbotron/Jumbotron';\nimport ClickGame from './components/ClickGame';\nimport KevinBacon from './images/bacon-me-crazy-logo.png';\nimport './App.css';\n\nconst imgStyle = {\n  margin: 'auto',\n  display: 'block'\n}\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid heading\">\n          <Jumbotron>\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-md-9 order-2 order-md-1\">\n                  <header className=\"App-header\">\n                    <div className=\"display-1 mb-4\">Bacon Me Crazy!</div>\n                    <h1 className=\"w-75 font-weight-light font-italic\">Click on the bacons (Kevin or regular) without repeating yourself</h1>\n                  </header>\n                </div>\n                <div className=\"col-md-3 order-1 order-md-2\">\n                  <img src={KevinBacon} alt=\"Kevin Bacon Logo\" className=\"img-fluid\" style={imgStyle}></img>\n                </div>\n              </div>\n            </div>\n          </Jumbotron>\n        </div>\n        <ClickGame />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}